# The is the ASYN example for communication
# "#!" marks lines that can be uncommented.

< envPaths

dbLoadDatabase("$(TOP)/dbd/WithAsyn.dbd")
WithAsyn_registerRecordDeviceDriver(pdbbase)
dbLoadTemplate("motor.substitutions")
dbLoadRecords("$(MOTOR)/db/motorUtil.db", "P=IOC:")


# The following commands are for a local serial line
# Configure the asyn server code for either sun or linux.
#!Sun Solaris !drvAsynSerialPortConfigure("L0","/dev/ttya" ,0,0,0)
#!Redhat Linux!drvAsynSerialPortConfigure("L0","/dev/ttyS0",0,0,0)

asynSetOption("L0", -1, "baud", "9600")
asynSetOption("L0", -1, "bits", "8")
asynSetOption("L0", -1, "parity", "none")
asynSetOption("L0", -1, "stop", "1")
asynSetOption("L0", -1, "clocal", "Y")
asynSetOption("L0", -1, "crtscts", "N")

# IMS IM483 driver setup parameters:
#     (1) maximum number of controllers in system
#     (2) motor task polling rate (min=1Hz,max=60Hz)
#  SM - single mode     PL - party mode
#!IM483SMSetup(1, 10)
#!IM483PLSetup(1, 10)

# IMS IM483 configuration parameters:
#     (1) controller# (chain#) being configured,
#     (2) ASYN port name
#  SM - single mode     PL - party mode
#!IM483SMConfig(0, "L0")
#!var drvIM483SMdebug 4
#!IM483PLConfig(0, "L0")
#!var drvIM483PLdebug 4

# MCB-4B driver setup parameters:
#     (1) maximum # of controllers,
#     (2) motor task polling rate (min=1Hz, max=60Hz)
#!MCB4BSetup(1, 10)

# MCB-4B driver configuration parameters:
#     (1) controller
#     (2) ASYN port name
#!MCB4BConfig(0, "L0")
#!asynOctetSetInputEos("L0",0,"\r")
#!asynOctetSetOutputEos("L0",0,"\r")
#!var drvMCB4BDebug 4

# MicroMo MVP2001 driver setup parameters: 
#
# NOTE: The 1st controller on each chain should have it's address = 1.
#       The rest of the controllers on a chain should follow sequentially.
#
#
# int MVP2001Setup(int num_cards, /* number of CHAINS of controllers */
#      int scan_rate)             /* polling rate  (Min=1Hz, max=60Hz) */
#!MVP2001Setup(1, 10)

# int MVP2001Config(int card,     /* CHAIN being configured */
#     (2) ASYN port name
#!MVP2001Config(0, "L0")
#!drvMVP2001debug=4

# PI C-844 driver setup parameters: 
#     (1) maximum number of controllers in system
#     (2) motor task polling rate (min=1Hz,max=60Hz)
#!PIC844Setup(1, 10)

# PI C-844 driver configuration parameters: 
#     (1) controller# being configured,
#     (2) ASYN port name
#     (3) address (GPIB only)
#!PIC844Config(0, "L0")
#!var drvPIC844debug 4

# PI C-848 driver setup parameters: 
#     (1) maximum number of controllers in system
#     (2) motor task polling rate (min=1Hz,max=60Hz)
#!PIC848Setup(1, 2)

# PI C-848 driver configuration parameters: 
#     (1) controller# being configured,
#     (2) ASYN port name
#!PIC848Config(0, "L0")
#!drvPIC848debug = 4

# Micos MoCo driver setup parameters:
# Load MicosSetup once.
#     (1) max # of controller groups.  Controller groups are per serial
#         port.
#     (2) max # axes per controller group.  Maximum 16. (addr 0-15)
#     (3) motor task polling rate (min=1Hz, max=60Hz, 10Hz works well)
# Example:
#   MicosSetup(1, 2, 10) 1 group. 2 axes (controllers) in the group.
#                        10Hz poll.
#!MicosSetup(1, 2, 10)

# Micos MoCo driver configuration parameters:
# Load one MicosConfig for each group of Micos drivers.
#     (1) "Controller group" number
#     (2) ASYN port name
#!MicosConfig(0, "L0")
#!var drvMicosDebug 4

# IMS MDrive driver setup parameters: 
#     (1) maximum number of controllers in system
#     (2) motor task polling rate (min=1Hz,max=60Hz)
#!MDriveSetup(1, 10)

# IMS MDrive driver configuration parameters: 
#     (1) controller# being configured,
#     (2) ASYN port name
#!MDriveConfig(0, "L0")
#!var drvMDrivedebug 4


# Aerotech Ensemble digital servo controller Setup
#     (1) maximum number of controllers in system
#     (2) motor task polling rate (min=1Hz,max=60Hz)
#!EnsembleSetup(1, 10)

# Aerotech Ensemble digital servo controller Configure
#     (1) controller# being configured, 
#     (2) asyn port name (string)
#!EnsembleConfig(0, "a-Serial[0]")


iocInit

# motorUtil (allstop & alldone)
motorUtilInit("IOC:")

